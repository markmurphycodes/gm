{"ast":null,"code":"var _jsxFileName = \"/opt/gm/client/src/components/navigation/terminalDrawer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Slide } from \"@material-ui/core\";\nimport Loader from \"../utils/loader\";\nimport XTerminal from \"../utils/terminal\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverAddress = \"http://localhost:8080\";\n\nconst connectToSocket = serverAddress => {\n  return new Promise(res => {\n    const socket = io(serverAddress);\n    res(socket);\n  });\n};\n\nconst TerminalDrawer = ({\n  open,\n  setOpen\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [retSocket, setRetSocket] = useState();\n  useEffect(() => {\n    connectToSocket(serverAddress).then(socket => {\n      setRetSocket(socket);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    style: {\n      position: \"fixed\"\n    },\n    direction: \"up\",\n    in: open,\n    onExit: () => setOpen(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"terminal\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(XTerminal, {\n        socket: retSocket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TerminalDrawer, \"nlNEuQopACldKFYcvpX3MTQ+pQk=\");\n\n_c = TerminalDrawer;\nexport default TerminalDrawer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TerminalDrawer\");","map":{"version":3,"sources":["/opt/gm/client/src/components/navigation/terminalDrawer.js"],"names":["React","useEffect","useState","Slide","Loader","XTerminal","io","serverAddress","connectToSocket","Promise","res","socket","TerminalDrawer","open","setOpen","loading","setLoading","retSocket","setRetSocket","then","position"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,aAAa,GAAG,uBAAtB;;AAEA,MAAMC,eAAe,GAAID,aAAD,IAAmB;AACzC,SAAO,IAAIE,OAAJ,CAAaC,GAAD,IAAS;AAC1B,UAAMC,MAAM,GAAGL,EAAE,CAACC,aAAD,CAAjB;AACAG,IAAAA,GAAG,CAACC,MAAD,CAAH;AACD,GAHM,CAAP;AAID,CALD;;AAOA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAAA;;AAC5C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,eAAe,CAACD,aAAD,CAAf,CAA+BY,IAA/B,CAAqCR,MAAD,IAAY;AAC9CO,MAAAA,YAAY,CAACP,MAAD,CAAZ;AACAK,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,sBACE,QAAC,KAAD;AACE,IAAA,KAAK,EAAE;AAAEI,MAAAA,QAAQ,EAAE;AAAZ,KADT;AAEE,IAAA,SAAS,EAAE,IAFb;AAGE,IAAA,EAAE,EAAEP,IAHN;AAIE,IAAA,MAAM,EAAE,MAAMC,OAAO,CAAC,KAAD,CAJvB;AAAA,2BAME;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA,gBACGC,OAAO,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAgB,QAAC,SAAD;AAAW,QAAA,MAAM,EAAEE;AAAnB;AAAA;AAAA;AAAA;AAAA;AAD1B;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAvBD;;GAAML,c;;KAAAA,c;AAyBN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Slide } from \"@material-ui/core\";\nimport Loader from \"../utils/loader\";\n\nimport XTerminal from \"../utils/terminal\";\nimport io from \"socket.io-client\";\n\nconst serverAddress = \"http://localhost:8080\";\n\nconst connectToSocket = (serverAddress) => {\n  return new Promise((res) => {\n    const socket = io(serverAddress);\n    res(socket);\n  });\n};\n\nconst TerminalDrawer = ({ open, setOpen }) => {\n  const [loading, setLoading] = useState(true);\n  const [retSocket, setRetSocket] = useState();\n\n  useEffect(() => {\n    connectToSocket(serverAddress).then((socket) => {\n      setRetSocket(socket);\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <Slide\n      style={{ position: \"fixed\" }}\n      direction={\"up\"}\n      in={open}\n      onExit={() => setOpen(false)}\n    >\n      <div id=\"terminal\">\n        {loading ? <Loader /> : <XTerminal socket={retSocket} />}\n      </div>\n    </Slide>\n  );\n};\n\nexport default TerminalDrawer;\n"]},"metadata":{},"sourceType":"module"}